Link of Problem :- https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/?envType=study-plan-v2&envId=top-interview-150

Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]


code :- Take 1ms
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.*;
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans = new LinkedList<>();
        Queue<TreeNode> qu = new LinkedList<>();
        boolean flag = true;

        if(root == null){ return ans;}

        qu.offer(root);

        while(!qu.isEmpty()){

            int size = qu.size();
            List<Integer> list = new LinkedList<>();

            for(int i=0; i<size; i++){
                
            if(qu.peek().left != null){ qu.offer(qu.peek().left);}
            if(qu.peek().right != null){ qu.offer(qu.peek().right);}

            list.add(qu.poll().val);
                
            }
            if(flag==false){
            Collections.reverse(list);
            }
            ans.add(list);
            flag = !flag;

        }

        return ans;
    }
}
