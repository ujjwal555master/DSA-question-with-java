link https://leetcode.com/problems/valid-palindrome/description/?envType=study-plan-v2&envId=top-interview-150

Code :- Time limit exceed
class Solution {
    public boolean isPalindrome(String s) {
        String str = "";
        for(int i=0; i<s.length(); i++){
            if(Character.isAlphabetic(s.charAt(i)) || Character.isDigit(s.charAt(i))){
                str = (str+s.charAt(i)).toLowerCase();
            }
        }
        if(str.length()==0){
            return true;
        }else{
            for(int i=0; i<str.length(); i++){
                if(str.charAt(i)!=str.charAt(str.length()-i-1)){
                    return false;
                }
            }
        }
        return true;
    }
}




code 2 := 4 ms
class Solution {
    public boolean isPalindrome(String s) {
        StringBuilder str = new StringBuilder("");
        for(int i=0; i<s.length(); i++){
            if(Character.isAlphabetic(s.charAt(i)) || Character.isDigit(s.charAt(i))){
                str.append(Character.toLowerCase(s.charAt(i)));
            }
        }
        if(str.length()==0){
            return true;
        }else{
            for(int i=0; i<str.length()/2; i++){
                if(str.charAt(i)!=str.charAt(str.length()-i-1)){
                    return false;
                }
            }
        }
        return true;
    }
}

code :- Take 2ms

class Solution {
    public boolean isPalindrome(String s) {
        int left = 0, right = s.length() - 1;
        
        while (left < right) {
            // Move left pointer to a valid character
            while (left < right && !Character.isLetterOrDigit(s.charAt(left))) {
                left++;
            }
            // Move right pointer to a valid character
            while (left < right && !Character.isLetterOrDigit(s.charAt(right))) {
                right--;
            }
            
            // Compare characters in lowercase
            if (Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))) {
                return false;
            }
            
            left++;
            right--;
        }
        
        return true;
    }
}




