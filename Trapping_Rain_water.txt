problem link:- https://leetcode.com/problems/trapping-rain-water/?envType=study-plan-v2&envId=top-interview-150
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.




It's take 2ms
code :- class Solution {
    public int trap(int[] height) {
        //Calculate firstly left maximum point
        int[] leftmax = new int[height.length];
        leftmax[0] = height[0];
        for(int i=1; i<height.length; i++){
            leftmax[i] = Math.max(height[i], leftmax[i-1]);
        }

        //Calculate right max element
        int[] rightmax = new int[height.length];
        rightmax[height.length-1] = height[height.length-1] ;
        for(int i=height.length-2; i>=0; i--){
            rightmax[i] = Math.max(height[i], rightmax[i+1]);
        }

        int tepwater =0;
        for(int i=0; i<height.length; i++){
            int waterlevel = Math.min(leftmax[i], rightmax[i]);
            tepwater += waterlevel-height[i];
        }
        return tepwater;
    }
}



It's take 1ms 
code:- class Solution {
    public int trap(int[] height) {
        int l = 0, r = height.length - 1;
        int leftMax = height[l], rightMax = height[r], res = 0;

        while (l < r) {
            if (leftMax < rightMax) {
                l++;
                leftMax = Math.max(height[l], leftMax);
                res += (leftMax - height[l]);
            } else {
                r--;
                rightMax = Math.max(height[r], rightMax);
                res += (rightMax - height[r]);
            }
        }

        return res;
    }
}
