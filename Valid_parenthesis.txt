Problem 12:- https://leetcode.com/problems/valid-parentheses/



Input: s = "()"
Output: true


code :- take 2ms 
import java.util.*;

class Solution {
    public boolean isValid(String s) {
        if(s.isEmpty()){
            return true;
        }

        Stack<Character> st = new Stack<>();

        for(int i=0; i<s.length(); i++){
            char current = s.charAt(i);

            if(current=='(' || current=='[' || current=='{'){
                st.push(current);
            }else{
                if(st.isEmpty()){
                    return false;
                }
                if((current==')' && st.peek()=='(') || (current==']' && st.peek()=='[') || (current=='}' && st.peek()=='{')){
                    st.pop();
                }else{
                    return false;
                }
            }
        }
        if(st.isEmpty()){
            return true;
        }else{
            return false;
        }        
    }
}


code 2 :-
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for (char c : s.toCharArray()) {
            if (c == '(' || c == '{' || c == '[') {
                stack.push(c);
            } else if (c == ')') {
                if (stack.isEmpty() || stack.pop() != '(') {
                    return false;
                }
            } else if (c == '}') {
                if (stack.isEmpty() || stack.pop() != '{') {
                    return false;
                }
            } else if (c == ']') {
                if (stack.isEmpty() || stack.pop() != '[') {
                    return false;
                }
            }
        }

        return stack.isEmpty();
    }
}

