Question Link :- https://leetcode.com/problems/h-index/?envType=study-plan-v2&envId=top-interview-150

Problem Statement :- Input: citations = [3,0,6,1,5]
Output: 3
Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.
Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.


code1 : which take 5ms to solve this problem
class Solution {
    public int hIndex(int[] citations) {
        int hindx=0;
        for(int i=1; i<citations.length+1; i++){
            int count=0;
            for(int j=0; j<citations.length; j++){
                if(citations[j] >= i){
                    count=count+1;
                }
            }
            if(count >= i){
                hindx=i;
            }else{
                break;
            }
        }
        return hindx;
    }
}


code 2:- it's take 19ms (tooooo badd)
class Solution {
    public int hIndex(int[] citations) {
        
        for(int i=citations.length; i>0; i--){
            int count=0;
            for(int j=0; j<citations.length; j++){
                if(citations[j] >= i){
                    count=count+1;
                }
            }
            if(count >= i){
                return i;
            }
        }
        return 0;
    }
}


code 3:- it's take 3ms
class Solution {
    public int hIndex(int[] citations) {
        int hindx=0;
        for(int i=1; i<citations.length+1; i++){
            int count=0;
            for(int j=0; j<citations.length; j++){
                if(citations[j] >= i){
                    count=count+1;
                    if(count == i){
                        break;
                    }
                }
            }
            if(count >= i){
                hindx=i;
            }else{
                break;
            }
        }
        return hindx;
    }
}


code 4:- 
import java.util.Arrays;

class Solution {
    public int hIndex(int[] citations) {
        Arrays.sort(citations); // Step 1: Sort citations in ascending order
        int n = citations.length;
        
        // Step 2: Find the highest h-index
        for (int i = 0; i < n; i++) {
            int h = n - i; // Number of papers with at least citations[i] citations
            if (citations[i] >= h) {
                return h;
            }
        }
        
        return 0;
    }
}
takes 2ms
